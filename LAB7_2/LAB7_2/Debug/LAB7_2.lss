
LAB7_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001008  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d81  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059c  00000000  00000000  000020b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00002650  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e7  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016a  00000000  00000000  00002d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002e6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	02 d0       	rcall	.+4      	; 0xfa <main>
  f6:	6c c0       	rjmp	.+216    	; 0x1d0 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <main>:
int main()
{
	unsigned char i;

	// Klargøring af SWITCH-porten
	initSwitchPort();
  fa:	52 d0       	rcall	.+164    	; 0x1a0 <initSwitchPort>
	// Klargøring af LED-porten
	initLEDport();
  fc:	2c d0       	rcall	.+88     	; 0x156 <initLEDport>
  fe:	c0 e0       	ldi	r28, 0x00	; 0
	// Test af switchStatus():
	// Resultatet skrives til hele lysdiodeporten
	// Testen afsluttes, når man samtidigt
	// trykker på SW7 og SW0
	i = 0;
	while (i != 0b10000001)
 100:	03 c0       	rjmp	.+6      	; 0x108 <main+0xe>
	{
		i = switchStatus();
 102:	52 d0       	rcall	.+164    	; 0x1a8 <switchStatus>
 104:	c8 2f       	mov	r28, r24
		writeAllLEDs(i);
 106:	2b d0       	rcall	.+86     	; 0x15e <writeAllLEDs>
	// Test af switchStatus():
	// Resultatet skrives til hele lysdiodeporten
	// Testen afsluttes, når man samtidigt
	// trykker på SW7 og SW0
	i = 0;
	while (i != 0b10000001)
 108:	c1 38       	cpi	r28, 0x81	; 129
 10a:	d9 f7       	brne	.-10     	; 0x102 <main+0x8>
	}

	// Tænd alle lysdioder i 2 sekunder
	// og sluk så alle lysdioder
	// Så kan vi se, at næste test starter
	writeAllLEDs(0xFF);
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	27 d0       	rcall	.+78     	; 0x15e <writeAllLEDs>
 110:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	87 ea       	ldi	r24, 0xA7	; 167
 114:	91 e6       	ldi	r25, 0x61	; 97
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x26>
 120:	00 00       	nop
	_delay_ms(2000);
	writeAllLEDs(0);
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	1c d0       	rcall	.+56     	; 0x15e <writeAllLEDs>
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	87 ea       	ldi	r24, 0xA7	; 167
 12a:	91 e6       	ldi	r25, 0x61	; 97
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x32>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x3c>
 136:	00 00       	nop
	// Læs efter tur hver enkelt switch
	// og tænd tilsvarende lysdiode, hvis der trykkes på tasten
	// - ellers slukkes lysdiden
	while (1)
	{
		for (i=0; i<=7; i++)
 138:	c0 e0       	ldi	r28, 0x00	; 0
		{
			if (switchOn(i))
 13a:	0a c0       	rjmp	.+20     	; 0x150 <main+0x56>
 13c:	8c 2f       	mov	r24, r28
 13e:	37 d0       	rcall	.+110    	; 0x1ae <switchOn>
 140:	88 23       	and	r24, r24
			turnOnLED(i);
 142:	19 f0       	breq	.+6      	; 0x14a <main+0x50>
 144:	8c 2f       	mov	r24, r28
 146:	0d d0       	rcall	.+26     	; 0x162 <turnOnLED>
 148:	02 c0       	rjmp	.+4      	; 0x14e <main+0x54>
			else
			turnOffLED(i);
 14a:	8c 2f       	mov	r24, r28
 14c:	19 d0       	rcall	.+50     	; 0x180 <turnOffLED>
 14e:	cf 5f       	subi	r28, 0xFF	; 255
	// Læs efter tur hver enkelt switch
	// og tænd tilsvarende lysdiode, hvis der trykkes på tasten
	// - ellers slukkes lysdiden
	while (1)
	{
		for (i=0; i<=7; i++)
 150:	c8 30       	cpi	r28, 0x08	; 8
 152:	a0 f3       	brcs	.-24     	; 0x13c <main+0x42>
 154:	f1 cf       	rjmp	.-30     	; 0x138 <main+0x3e>

00000156 <initLEDport>:
 156:	8f ef       	ldi	r24, 0xFF	; 255
#include <avr/io.h>
#define MAX_LED_NR 7

void initLEDport()
{
	DDRB = 0xFF;
 158:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 15a:	15 b8       	out	0x05, r1	; 5
 15c:	08 95       	ret

0000015e <writeAllLEDs>:
}

void writeAllLEDs(unsigned char pattern)
{
	// Hent parameteren og skriv til lysdioderne
	PORTB = pattern;
 15e:	85 b9       	out	0x05, r24	; 5
 160:	08 95       	ret

00000162 <turnOnLED>:
void turnOnLED(unsigned char led_nr)
{
	// Lokal variabel
	unsigned char mask;
	// Vi skal kun lave noget, hvis led_nr < 8
	if (led_nr <= MAX_LED_NR)
 162:	88 30       	cpi	r24, 0x08	; 8
 164:	60 f4       	brcc	.+24     	; 0x17e <turnOnLED+0x1c>
	{
		// Dan maske på basis af parameteren (led_nr)
		mask = 0b00000001 << led_nr;
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	a9 01       	movw	r20, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <turnOnLED+0x10>
 16e:	44 0f       	add	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	8a 95       	dec	r24
 174:	e2 f7       	brpl	.-8      	; 0x16e <turnOnLED+0xc>
 176:	ca 01       	movw	r24, r20
		// Tænd den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB | mask;
 178:	93 b1       	in	r25, 0x03	; 3
 17a:	89 2b       	or	r24, r25
 17c:	85 b9       	out	0x05, r24	; 5
 17e:	08 95       	ret

00000180 <turnOffLED>:
void turnOffLED(unsigned char led_nr)
{
	// Lokal variabel
	unsigned char mask;
	// Vi skal kun lave noget, hvis led_nr < 8
	if (led_nr <= MAX_LED_NR)
 180:	88 30       	cpi	r24, 0x08	; 8
 182:	68 f4       	brcc	.+26     	; 0x19e <turnOffLED+0x1e>
	{
		// Dan maske på basis af parameteren (led_nr)
		mask = 0b00000001 << led_nr;
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	a9 01       	movw	r20, r18
 18a:	02 c0       	rjmp	.+4      	; 0x190 <turnOffLED+0x10>
 18c:	44 0f       	add	r20, r20
 18e:	55 1f       	adc	r21, r21
 190:	8a 95       	dec	r24
 192:	e2 f7       	brpl	.-8      	; 0x18c <turnOffLED+0xc>
 194:	ca 01       	movw	r24, r20
		// Sluk den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB & ~mask;
 196:	93 b1       	in	r25, 0x03	; 3
 198:	80 95       	com	r24
 19a:	89 23       	and	r24, r25
 19c:	85 b9       	out	0x05, r24	; 5
 19e:	08 95       	ret

000001a0 <initSwitchPort>:
#include <avr/io.h>

// Klargør switch-porten
void initSwitchPort()
{
	DDRA = 0x00;
 1a0:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	82 b9       	out	0x02, r24	; 2
 1a6:	08 95       	ret

000001a8 <switchStatus>:
}

// Læser alle switches samtidigt
unsigned char switchStatus()
{
	return ~PINA;
 1a8:	80 b1       	in	r24, 0x00	; 0
}
 1aa:	80 95       	com	r24
 1ac:	08 95       	ret

000001ae <switchOn>:

// Returnerer TRUE, hvis switchen med nummeret
// "switch_nr" er aktiveret - ellers returneres FALSE
unsigned char switchOn(unsigned char switch_nr)
{
	if (switch_nr > 7)
 1ae:	88 30       	cpi	r24, 0x08	; 8
 1b0:	68 f4       	brcc	.+26     	; 0x1cc <switchOn+0x1e>
	{
		return 0;
	}
	return !(PINA & (1 << switch_nr));
 1b2:	20 b1       	in	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	a9 01       	movw	r20, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <switchOn+0x10>
 1ba:	55 95       	asr	r21
 1bc:	47 95       	ror	r20
 1be:	8a 95       	dec	r24
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <switchOn+0xc>
 1c2:	ca 01       	movw	r24, r20
 1c4:	51 e0       	ldi	r21, 0x01	; 1
 1c6:	85 27       	eor	r24, r21
 1c8:	81 70       	andi	r24, 0x01	; 1
 1ca:	08 95       	ret
// "switch_nr" er aktiveret - ellers returneres FALSE
unsigned char switchOn(unsigned char switch_nr)
{
	if (switch_nr > 7)
	{
		return 0;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
	}
	return !(PINA & (1 << switch_nr));
 1ce:	08 95       	ret

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
