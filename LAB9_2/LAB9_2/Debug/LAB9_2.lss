
LAB9_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d71  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c43  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d6  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  0000202c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000555  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003a  00000000  00000000  000025e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002623  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	02 d0       	rcall	.+4      	; 0xfa <main>
  f6:	48 c0       	rjmp	.+144    	; 0x188 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <main>:
#include "Switch.h"

int main(void)
{
    // Initier switch-port og PB5 (OC1A) som output
    initSwitchPort();
  fa:	31 d0       	rcall	.+98     	; 0x15e <initSwitchPort>
    DDRB |= (1 << PB5);
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;
 102:	15 b8       	out	0x05, r1	; 5

    // Sæt Timer 1 i Phase Correct PWM, 10-bit mode
    TCCR1A = (1 << COM1A1) | (1 << WGM11) | (1 << WGM10);
 104:	83 e8       	ldi	r24, 0x83	; 131
 106:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    TCCR1B = (1 << CS10);  // Ingen prescaler
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>

    // Startværdi (50 % lysstyrke)
    OCR1A = 512;
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	92 e0       	ldi	r25, 0x02	; 2
 114:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 118:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>

    while (1) 
    {
        if (switchOn(0)) {
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	23 d0       	rcall	.+70     	; 0x166 <switchOn>
 120:	88 23       	and	r24, r24
 122:	39 f0       	breq	.+14     	; 0x132 <main+0x38>
            OCR1A = 51;     // ca. 5 % duty cycle
 124:	83 e3       	ldi	r24, 0x33	; 51
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 12c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
        }
        else if (switchOn(1)) {
 130:	f5 cf       	rjmp	.-22     	; 0x11c <main+0x22>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	18 d0       	rcall	.+48     	; 0x166 <switchOn>
 136:	88 23       	and	r24, r24
 138:	39 f0       	breq	.+14     	; 0x148 <main+0x4e>
            OCR1A = 512;    // ca. 50 % duty cycle
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	92 e0       	ldi	r25, 0x02	; 2
 13e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 142:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
        }
        else if (switchOn(2)) {
 146:	ea cf       	rjmp	.-44     	; 0x11c <main+0x22>
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	0d d0       	rcall	.+26     	; 0x166 <switchOn>
 14c:	88 23       	and	r24, r24
 14e:	31 f3       	breq	.-52     	; 0x11c <main+0x22>
            OCR1A = 972;    // ca. 95 % duty cycle
 150:	8c ec       	ldi	r24, 0xCC	; 204
 152:	93 e0       	ldi	r25, 0x03	; 3
 154:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 158:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 15c:	df cf       	rjmp	.-66     	; 0x11c <main+0x22>

0000015e <initSwitchPort>:

// Læser alle switches samtidigt
unsigned char switchStatus()
{
	return ~PINA;
}
 15e:	11 b8       	out	0x01, r1	; 1
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	82 b9       	out	0x02, r24	; 2
 164:	08 95       	ret

00000166 <switchOn>:

// Returnerer TRUE, hvis switchen med nummeret
// "switch_nr" er aktiveret - ellers returneres FALSE
unsigned char switchOn(unsigned char switch_nr)
{
	if (switch_nr > 7)
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	68 f4       	brcc	.+26     	; 0x184 <switchOn+0x1e>
	{
		return 0;
	}
	return !(PINA & (1 << switch_nr));
 16a:	20 b1       	in	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	a9 01       	movw	r20, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <switchOn+0x10>
 172:	55 95       	asr	r21
 174:	47 95       	ror	r20
 176:	8a 95       	dec	r24
 178:	e2 f7       	brpl	.-8      	; 0x172 <switchOn+0xc>
 17a:	ca 01       	movw	r24, r20
 17c:	51 e0       	ldi	r21, 0x01	; 1
 17e:	85 27       	eor	r24, r21
 180:	81 70       	andi	r24, 0x01	; 1
 182:	08 95       	ret
// "switch_nr" er aktiveret - ellers returneres FALSE
unsigned char switchOn(unsigned char switch_nr)
{
	if (switch_nr > 7)
	{
		return 0;
 184:	80 e0       	ldi	r24, 0x00	; 0
	}
	return !(PINA & (1 << switch_nr));
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
