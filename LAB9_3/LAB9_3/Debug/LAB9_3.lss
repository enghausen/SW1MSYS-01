
LAB9_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dd0  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c43  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000412  00000000  00000000  00001d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00002134  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000555  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003a  00000000  00000000  000026f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000272b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	02 d0       	rcall	.+4      	; 0xfa <main>
  f6:	7e c0       	rjmp	.+252    	; 0x1f4 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <main>:
#include "Switch.h"

int main(void)
{
    // Initier switch port og OC1A (PB5) som output
    initSwitchPort();
  fa:	67 d0       	rcall	.+206    	; 0x1ca <initSwitchPort>
    DDRB |= (1 << PB5);
  fc:	84 b1       	in	r24, 0x04	; 4
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x00;
 102:	15 b8       	out	0x05, r1	; 5

    // Sæt Timer 1 i CTC mode og toggle OC1A på match
    TCCR1A = (1 << COM1A0);                 // Toggle OC1A on compare match
 104:	80 e4       	ldi	r24, 0x40	; 64
 106:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    TCCR1B = (1 << WGM12) | (1 << CS11);    // CTC mode, prescaler 8
 10a:	8a e0       	ldi	r24, 0x0A	; 10
 10c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>

    while (1)
    {
        if (switchOn(0))
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	5f d0       	rcall	.+190    	; 0x1d2 <switchOn>
 114:	88 23       	and	r24, r24
 116:	39 f0       	breq	.+14     	; 0x126 <main+0x2c>
            OCR1A = 1909; // C5
 118:	85 e7       	ldi	r24, 0x75	; 117
 11a:	97 e0       	ldi	r25, 0x07	; 7
 11c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 120:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
        else if (switchOn(1))
 124:	f5 cf       	rjmp	.-22     	; 0x110 <main+0x16>
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	54 d0       	rcall	.+168    	; 0x1d2 <switchOn>
 12a:	88 23       	and	r24, r24
 12c:	39 f0       	breq	.+14     	; 0x13c <main+0x42>
            OCR1A = 1701; // D5
 12e:	85 ea       	ldi	r24, 0xA5	; 165
 130:	96 e0       	ldi	r25, 0x06	; 6
 132:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 136:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
        else if (switchOn(2))
 13a:	ea cf       	rjmp	.-44     	; 0x110 <main+0x16>
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	49 d0       	rcall	.+146    	; 0x1d2 <switchOn>
 140:	88 23       	and	r24, r24
 142:	39 f0       	breq	.+14     	; 0x152 <main+0x58>
            OCR1A = 1515; // E5
 144:	8b ee       	ldi	r24, 0xEB	; 235
 146:	95 e0       	ldi	r25, 0x05	; 5
 148:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 14c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
        else if (switchOn(3))
 150:	df cf       	rjmp	.-66     	; 0x110 <main+0x16>
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	3e d0       	rcall	.+124    	; 0x1d2 <switchOn>
 156:	88 23       	and	r24, r24
 158:	39 f0       	breq	.+14     	; 0x168 <main+0x6e>
            OCR1A = 1430; // F5
 15a:	86 e9       	ldi	r24, 0x96	; 150
 15c:	95 e0       	ldi	r25, 0x05	; 5
 15e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 162:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
        else if (switchOn(4))
 166:	d4 cf       	rjmp	.-88     	; 0x110 <main+0x16>
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	33 d0       	rcall	.+102    	; 0x1d2 <switchOn>
 16c:	88 23       	and	r24, r24
 16e:	39 f0       	breq	.+14     	; 0x17e <main+0x84>
            OCR1A = 1275; // G5
 170:	8b ef       	ldi	r24, 0xFB	; 251
 172:	94 e0       	ldi	r25, 0x04	; 4
 174:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 178:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
        else if (switchOn(5))
 17c:	c9 cf       	rjmp	.-110    	; 0x110 <main+0x16>
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	28 d0       	rcall	.+80     	; 0x1d2 <switchOn>
 182:	88 23       	and	r24, r24
 184:	39 f0       	breq	.+14     	; 0x194 <main+0x9a>
            OCR1A = 1135; // A5
 186:	8f e6       	ldi	r24, 0x6F	; 111
 188:	94 e0       	ldi	r25, 0x04	; 4
 18a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 18e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
        else if (switchOn(6))
 192:	be cf       	rjmp	.-132    	; 0x110 <main+0x16>
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	1d d0       	rcall	.+58     	; 0x1d2 <switchOn>
 198:	88 23       	and	r24, r24
 19a:	39 f0       	breq	.+14     	; 0x1aa <main+0xb0>
            OCR1A = 1009; // B5
 19c:	81 ef       	ldi	r24, 0xF1	; 241
 19e:	93 e0       	ldi	r25, 0x03	; 3
 1a0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1a4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
        else if (switchOn(7))
 1a8:	b3 cf       	rjmp	.-154    	; 0x110 <main+0x16>
 1aa:	87 e0       	ldi	r24, 0x07	; 7
 1ac:	12 d0       	rcall	.+36     	; 0x1d2 <switchOn>
 1ae:	88 23       	and	r24, r24
 1b0:	39 f0       	breq	.+14     	; 0x1c0 <main+0xc6>
            OCR1A = 953;  // C6
 1b2:	89 eb       	ldi	r24, 0xB9	; 185
 1b4:	93 e0       	ldi	r25, 0x03	; 3
 1b6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 1be:	a8 cf       	rjmp	.-176    	; 0x110 <main+0x16>
        else
            OCR1A = 0;     // Stop tone
 1c0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1c4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 1c8:	a3 cf       	rjmp	.-186    	; 0x110 <main+0x16>

000001ca <initSwitchPort>:

// Læser alle switches samtidigt
unsigned char switchStatus()
{
	return ~PINA;
}
 1ca:	11 b8       	out	0x01, r1	; 1
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	82 b9       	out	0x02, r24	; 2
 1d0:	08 95       	ret

000001d2 <switchOn>:

// Returnerer TRUE, hvis switchen med nummeret
// "switch_nr" er aktiveret - ellers returneres FALSE
unsigned char switchOn(unsigned char switch_nr)
{
	if (switch_nr > 7)
 1d2:	88 30       	cpi	r24, 0x08	; 8
 1d4:	68 f4       	brcc	.+26     	; 0x1f0 <switchOn+0x1e>
	{
		return 0;
	}
	return !(PINA & (1 << switch_nr));
 1d6:	20 b1       	in	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	a9 01       	movw	r20, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <switchOn+0x10>
 1de:	55 95       	asr	r21
 1e0:	47 95       	ror	r20
 1e2:	8a 95       	dec	r24
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <switchOn+0xc>
 1e6:	ca 01       	movw	r24, r20
 1e8:	51 e0       	ldi	r21, 0x01	; 1
 1ea:	85 27       	eor	r24, r21
 1ec:	81 70       	andi	r24, 0x01	; 1
 1ee:	08 95       	ret
// "switch_nr" er aktiveret - ellers returneres FALSE
unsigned char switchOn(unsigned char switch_nr)
{
	if (switch_nr > 7)
	{
		return 0;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
	}
	return !(PINA & (1 << switch_nr));
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
